const ethers = require('ethers')
const lighthouse = require('@lighthouse-web3/sdk')

const signAuthMessage = async (publicKey, privateKey) => {
    const provider = new ethers.JsonRpcProvider();
    const signer = new ethers.Wallet(privateKey, provider);
    const messageRequested = (await lighthouse.getAuthMessage(publicKey)).data.message;
    const signedMessage = await signer.signMessage(messageRequested);
    return signedMessage;
}

const revokeAccess = async () => {
    try {
      // CID of the encrypted file that you want to revoke access to
      // CID is generated by uploading a file with encryption
      // Only the owner of the file can revoke access to another wallet address
      const cid = 'QmXhvRaWPpEXgFzqBLkq75EcE79oghqE3pGtkmiU21LnPf' // Example: "Qma7Na9sEdeM6aQeu6bUFW54HktNnW2k8g226VunXBhrn7";
      const publicKey = '0x37e401D92961908046c2672A89a780bFaD2FA927' // Example: "0xa3c960b3ba29367ecbcaf1430452c6cd7516f588";
      const privateKey = "475d684b486e10bacd57dc67ac6b0ab566ab0b3235c1acda07fa3bb3bb8eb425" //process.env.PRIVATE_KEY;

      const signedMessage = await signAuthMessage(publicKey, privateKey);
      const publicKeyUserB = ['0xaf8dAa403ddB2b0742BfABE44214Fa8fBe69DCAB'] // Example: "0x487fc2fE07c593EAb555729c3DD6dF85020B5160";
  
      const revokeResponse = await lighthouse.revokeFileAccess(
        publicKey,
        publicKeyUserB,
        cid,
        signedMessage
      )
      console.log(revokeResponse)
    } catch (error) {
      console.log(error)
    }
  }
  revokeAccess()

      
/*
{
  data: {
    cid: 'QmXhvRaWPpEXgFzqBLkq75EcE79oghqE3pGtkmiU21LnPf',
    revokeTo: [ '0xaf8dAa403ddB2b0742BfABE44214Fa8fBe69DCAB' ],
    status: 'Success'
  }
}

after this tried the following 
$ node accessCondition.js
{
  data: {
    conditions: [],
    conditionsSolana: [],
    sharedTo: [],
    owner: '0x37e401d92961908046c2672a89a780bfad2fa927',
    cid: 'QmXhvRaWPpEXgFzqBLkq75EcE79oghqE3pGtkmiU21LnPf'
  }
}
*/