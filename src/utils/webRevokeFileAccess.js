const ethers = require('ethers')
const lighthouse = require('@lighthouse-web3/sdk')

const signAuthMessage = async () => {
    const provider = new ethers.providers.Web3Provider(window.ethereum)
    const signer = provider.getSigner()
    const address = await signer.getAddress()
    const messageRequested = (await lighthouse.getAuthMessage(address)).data.message
    const signedMessage = await signer.signMessage(messageRequested)
    return ({
        signedMessage: signedMessage,
        publicKey: address
    })
}

const revokeAccess = async (fileCid, revokeAddresses) => {
    try {
        // CID of the encrypted file that you want to revoke access to
        // CID is generated by uploading a file with encryption
        // Only the owner of the file can revoke access to another wallet address
        const cid = fileCid;
        const signedMessage = await signAuthMessage();
        const publicKeyUserB = revokeAddresses // Example: "0x487fc2fE07c593EAb555729c3DD6dF85020B5160";

        const revokeResponse = await lighthouse.revokeFileAccess(
            signedMessage.publicKey,
            publicKeyUserB,
            cid,
            signedMessage.signedMessage
        )
        console.log(revokeResponse)
    } catch (error) {
        console.log(error)
    }
}

module.exports = { revokeAccess };

/*
{
  data: {
    cid: 'QmXhvRaWPpEXgFzqBLkq75EcE79oghqE3pGtkmiU21LnPf',
    revokeTo: [ '0xaf8dAa403ddB2b0742BfABE44214Fa8fBe69DCAB' ],
    status: 'Success'
  }
}

after this tried the following 
$ node accessCondition.js
{
  data: {
    conditions: [],
    conditionsSolana: [],
    sharedTo: [],
    owner: '0x37e401d92961908046c2672a89a780bfad2fa927',
    cid: 'QmXhvRaWPpEXgFzqBLkq75EcE79oghqE3pGtkmiU21LnPf'
  }
}
*/